"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collapse = void 0;
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
const Box_1 = require("../Box");
function usePrevious(value) {
    const ref = (0, react_1.useRef)();
    function updatePrevious(newVal) {
        ref.current = newVal;
    }
    (0, react_1.useEffect)(() => {
        updatePrevious(value);
    }, [value]);
    return { value: ref.current, updatePrevious };
}
exports.Collapse = (0, react_1.forwardRef)((_a, ref) => {
    var { endingHeight, startingHeight, duration, 
    // animateOpacity,
    isOpen, onAnimationEnd, onAnimationStart } = _a, props = __rest(_a, ["endingHeight", "startingHeight", "duration", "isOpen", "onAnimationEnd", "onAnimationStart"]);
    if (react_native_1.Platform.OS === 'android') {
        react_native_1.UIManager.setLayoutAnimationEnabledExperimental &&
            react_native_1.UIManager.setLayoutAnimationEnabledExperimental(true);
    }
    const CustomLayoutLinear = {
        duration: duration ? duration : 400,
        create: {
            type: react_native_1.LayoutAnimation.Types.easeInEaseOut,
            property: react_native_1.LayoutAnimation.Properties.opacity,
        },
        update: {
            type: react_native_1.LayoutAnimation.Types.easeInEaseOut,
        },
    };
    const defaultStartHeight = isOpen
        ? endingHeight
        : startingHeight
            ? startingHeight
            : 1;
    let animatedStyle = { height: defaultStartHeight };
    const animateView = () => {
        if (onAnimationStart) {
            onAnimationStart();
        }
        animatedStyle = {
            height: isOpen ? endingHeight : defaultStartHeight,
        };
        const callback = onAnimationEnd ? onAnimationEnd : () => { };
        react_native_1.LayoutAnimation.configureNext(CustomLayoutLinear, callback());
    };
    const wasOpen = usePrevious(isOpen);
    if ((wasOpen === null || wasOpen === void 0 ? void 0 : wasOpen.value) && wasOpen.value !== isOpen) {
        animateView();
        wasOpen.updatePrevious(isOpen);
    }
    const [size, setSize] = react_1.default.useState(startingHeight !== null && startingHeight !== void 0 ? startingHeight : 0);
    const provideSize = (layoutSize) => {
        setSize(layoutSize.height);
    };
    const _web = {
        transition: `height ${duration !== null && duration !== void 0 ? duration : '400'}ms`,
        height: isOpen ? endingHeight || size : startingHeight || 0,
    };
    return (react_1.default.createElement(Box_1.Box, { style: Object.assign(Object.assign({}, animatedStyle), (react_native_1.Platform.OS === 'web' && _web)), overflow: "hidden", ref: ref },
        react_1.default.createElement(Box_1.Box, Object.assign({ overflow: react_native_1.Platform.OS === 'web' ? 'auto' : 'scroll', onLayout: (e) => provideSize(e.nativeEvent.layout) }, props))));
});
