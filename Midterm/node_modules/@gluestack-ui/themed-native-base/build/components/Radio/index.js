"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Radio = void 0;
const react_1 = require("react");
const styled_components_1 = require("./styled-components");
const radio_1 = require("@gluestack-ui/radio");
const usePropResolution_1 = require("../../hooks/usePropResolution");
const react_2 = __importDefault(require("react"));
const Icons_1 = require("../Icons");
const AccessibleRadio = (0, radio_1.createRadio)({
    Root: styled_components_1.Root,
    Group: styled_components_1.Group,
    Icon: styled_components_1.Icon,
    Indicator: styled_components_1.Indicator,
    Label: styled_components_1.Label,
});
const RadioGroupContext = (0, react_1.createContext)({});
const AccessibleRadioGroup = (0, react_1.forwardRef)((_a, ref) => {
    var { children, colorScheme, size, _radio = {}, isDisabled } = _a, props = __rest(_a, ["children", "colorScheme", "size", "_radio", "isDisabled"]);
    const resolvedProps = (0, usePropResolution_1.usePropResolution)(props);
    return (react_2.default.createElement(RadioGroupContext.Provider, { value: {
            colorScheme: colorScheme,
            radioProps: _radio,
            size: size,
            isDisabled: isDisabled,
        } },
        react_2.default.createElement(AccessibleRadio.Group, Object.assign({}, resolvedProps, { ref: ref }), children)));
});
const RadioTemp = (0, react_1.forwardRef)((_a, ref) => {
    var _b;
    var { colorScheme, icon: IconPassed, _stack = {}, children, wrapperRef, isHovered, isPressed, isFocused, value, isDisabled, isFocusVisible, isInvalid, _interactionBox = {} } = _a, props = __rest(_a, ["colorScheme", "icon", "_stack", "children", "wrapperRef", "isHovered", "isPressed", "isFocused", "value", "isDisabled", "isFocusVisible", "isInvalid", "_interactionBox"]);
    const { colorScheme: colorSchemeFromGroup, radioProps, size, isDisabled: isDisabledFromGroup, } = (0, react_1.useContext)(RadioGroupContext);
    let RadioSize = {};
    let RadioIndicatorSize = {};
    if (size) {
        if (Number(size)) {
            RadioIndicatorSize = { size: size };
        }
        else {
            RadioSize = { size: size };
        }
    }
    const { _stack: stackProps, _interactionBox: interactionBoxProps, restProps, } = radioProps;
    const resolvedPropsForIndicator = (0, usePropResolution_1.usePropResolution)(Object.assign(Object.assign(Object.assign({}, RadioIndicatorSize), restProps), props));
    const resolvedPropsForRadio = (0, usePropResolution_1.usePropResolution)(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, RadioSize), stackProps), interactionBoxProps), _stack), _interactionBox));
    return (react_2.default.createElement(AccessibleRadio, Object.assign({ colorScheme: (_b = colorSchemeFromGroup !== null && colorSchemeFromGroup !== void 0 ? colorSchemeFromGroup : colorScheme) !== null && _b !== void 0 ? _b : 'primary', isHovered: isHovered, isFocused: isFocused, isFocusVisible: isFocusVisible, isDisabled: isDisabledFromGroup !== null && isDisabledFromGroup !== void 0 ? isDisabledFromGroup : isDisabled, isInvalid: isInvalid, isActive: isPressed, value: value }, resolvedPropsForRadio, { ref: ref }),
        react_2.default.createElement(AccessibleRadio.Indicator, Object.assign({}, resolvedPropsForIndicator, { alignItems: "center", justifyContent: "center", ref: wrapperRef }),
            react_2.default.createElement(AccessibleRadio.Icon, { as: IconPassed
                    ? () => (0, react_1.cloneElement)(IconPassed, {
                        h: 'full',
                        w: 'full',
                    })
                    : Icons_1.CircleIcon })),
        children && react_2.default.createElement(AccessibleRadio.Label, null, children)));
});
RadioTemp.Group = AccessibleRadioGroup;
exports.Radio = RadioTemp;
