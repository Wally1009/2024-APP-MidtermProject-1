"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = exports.AccessibleSelectIte = void 0;
const select_1 = require("@gluestack-ui/select");
const actionsheet_1 = require("@gluestack-ui/actionsheet");
const styled_components_actionsheet_1 = require("./styled-components-actionsheet");
const styled_components_1 = require("./styled-components");
const react_1 = require("react");
const usePropResolution_1 = require("../../hooks/usePropResolution");
const react_2 = __importDefault(require("react"));
const Icons_1 = require("../Icons");
const AccessibleActionsheet = (0, actionsheet_1.createActionsheet)({
    Root: styled_components_actionsheet_1.Root,
    Backdrop: styled_components_actionsheet_1.Backdrop,
    Content: styled_components_actionsheet_1.Content,
    DragIndicator: styled_components_actionsheet_1.DragIndicator,
    IndicatorWrapper: styled_components_actionsheet_1.IndicatorWrapper,
    Item: styled_components_actionsheet_1.Item,
    ItemText: styled_components_actionsheet_1.ItemText,
    Icon: styled_components_actionsheet_1.Icon,
    ScrollView: styled_components_actionsheet_1.ScrollView,
    VirtualizedList: styled_components_actionsheet_1.VirtualizedList,
    FlatList: styled_components_actionsheet_1.FlatList,
    SectionList: styled_components_actionsheet_1.SectionList,
    SectionHeaderText: styled_components_actionsheet_1.SectionHeaderText,
    // @ts-ignore
    AnimatePresence: styled_components_actionsheet_1.Content.AnimatePresence,
});
const AccessibleSelect = (0, select_1.createSelect)({
    Root: styled_components_1.Root,
    Trigger: styled_components_1.Trigger,
    Input: styled_components_1.Input,
    Icon: styled_components_1.Icon,
}, {
    Portal: AccessibleActionsheet,
    Backdrop: AccessibleActionsheet.Backdrop,
    Content: AccessibleActionsheet.Content,
    DragIndicator: AccessibleActionsheet.DragIndicator,
    DragIndicatorWrapper: AccessibleActionsheet.DragIndicatorWrapper,
    Item: AccessibleActionsheet.Item,
    ItemText: AccessibleActionsheet.ItemText,
    ScrollView: AccessibleActionsheet.ScrollView,
    VirtualizedList: AccessibleActionsheet.VirtualizedList,
    FlatList: AccessibleActionsheet.FlatList,
    SectionList: AccessibleActionsheet.SectionList,
    SectionHeaderText: AccessibleActionsheet.SectionHeaderText,
});
const SelectContext = (0, react_1.createContext)({});
const NewSelect = (0, react_1.forwardRef)((_a, ref) => {
    var _b, _c;
    var { children, placeholder, color, placeholderTextColor, 
    //
    _item, _selectedItem, _actionSheet, _actionSheetContent, _actionSheetBody, 
    //
    selectedValue, defaultValue, onValueChange, isInvalid, isDisabled, isHovered, isFocused, isFocusVisible, dropdownIcon, dropdownOpenIcon, dropdownCloseIcon, onOpen, onClose, wrapperRef, variant } = _a, props = __rest(_a, ["children", "placeholder", "color", "placeholderTextColor", "_item", "_selectedItem", "_actionSheet", "_actionSheetContent", "_actionSheetBody", "selectedValue", "defaultValue", "onValueChange", "isInvalid", "isDisabled", "isHovered", "isFocused", "isFocusVisible", "dropdownIcon", "dropdownOpenIcon", "dropdownCloseIcon", "onOpen", "onClose", "wrapperRef", "variant"]);
    const contextValue = { itemProps: _item, selectedItemProp: _selectedItem };
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const handleOpen = () => {
        setIsOpen(true);
        if (onOpen)
            onOpen();
    };
    const handleClose = () => {
        setIsOpen(false);
        if (onClose)
            onClose();
    };
    const resolvedPropForGluestack = (0, usePropResolution_1.usePropResolution)(props);
    let inputStyle = {};
    if (placeholderTextColor)
        inputStyle = {
            props: { placeholderTextColor: `$${placeholderTextColor}` },
        };
    return (react_2.default.createElement(AccessibleSelect, Object.assign({ defaultValue: defaultValue, onValueChange: onValueChange, selectedValue: selectedValue, isInvalid: isInvalid, isDisabled: isDisabled, isHovered: isHovered, isFocused: isFocused, isFocusVisible: isFocusVisible, onOpen: handleOpen, onClose: handleClose }, resolvedPropForGluestack, { ref: wrapperRef }),
        react_2.default.createElement(AccessibleSelect.Trigger, null,
            react_2.default.createElement(AccessibleSelect.Input, { variant: variant, color: `${color}`, sx: inputStyle, placeholder: placeholder, 
                // TODO: resolve this
                // @ts-ignore
                ref: ref }),
            react_2.default.createElement(AccessibleSelect.Icon, null, isOpen
                ? (_b = dropdownOpenIcon !== null && dropdownOpenIcon !== void 0 ? dropdownOpenIcon : dropdownIcon) !== null && _b !== void 0 ? _b : react_2.default.createElement(styled_components_actionsheet_1.Icon, { as: Icons_1.ChevronDownIcon })
                : (_c = dropdownCloseIcon !== null && dropdownCloseIcon !== void 0 ? dropdownCloseIcon : dropdownIcon) !== null && _c !== void 0 ? _c : react_2.default.createElement(styled_components_actionsheet_1.Icon, { as: Icons_1.ChevronDownIcon }))),
        react_2.default.createElement(AccessibleSelect.Portal, null,
            react_2.default.createElement(AccessibleSelect.Backdrop, { onPress: handleClose }),
            react_2.default.createElement(AccessibleSelect.Content, Object.assign({}, _actionSheetContent),
                react_2.default.createElement(AccessibleSelect.DragIndicatorWrapper, null,
                    react_2.default.createElement(AccessibleSelect.DragIndicator, null)),
                react_2.default.createElement(SelectContext.Provider, { value: contextValue }, children)))));
});
exports.AccessibleSelectIte = (0, react_1.forwardRef)((_a, ref) => {
    var { children, label, value } = _a, props = __rest(_a, ["children", "label", "value"]);
    const resolvedprops = (0, usePropResolution_1.usePropResolution)(props);
    const { itemProps,
    // selectedItemProp
    // TODO: this will be incorporated later
     } = (0, react_1.useContext)(SelectContext);
    return (react_2.default.createElement(AccessibleSelect.Item, Object.assign({ label: label, value: value }, itemProps, resolvedprops, { ref: ref }),
        react_2.default.createElement(AccessibleSelect.ItemText, null, children)));
});
const AccessibleSelectItem = (0, react_1.forwardRef)((_a, ref) => {
    var { children, label, value } = _a, props = __rest(_a, ["children", "label", "value"]);
    const resolvedprops = (0, usePropResolution_1.usePropResolution)(props);
    const { itemProps,
    // selectedItemProp
    // TODO: this will be incorporated later
     } = (0, react_1.useContext)(SelectContext);
    return (react_2.default.createElement(AccessibleSelect.Item, Object.assign({ label: label, value: value }, itemProps, resolvedprops, { ref: ref }),
        react_2.default.createElement(AccessibleSelect.ItemText, null, children)));
});
const SelectNew = NewSelect;
SelectNew.Item = AccessibleSelectItem;
exports.Select = SelectNew;
