import { Root as AccessibleSkeleton } from './styled-components';
import { GenericComponentType } from '../../types';
import React from 'react';
type IColorToken = React.ComponentProps<typeof AccessibleSkeleton>['bg'];
type ISizeToken = React.ComponentProps<typeof AccessibleSkeleton>['h'];
type ReplaceDollar<T> = T extends `$${infer N}` ? N : never;
type IColor = ReplaceDollar<IColorToken>;
type ISize = ReplaceDollar<ISizeToken> | number;
type ISkeletonComponentProps = {
    fadeDuration?: number;
    speed?: number;
    startColor?: IColor;
    endColor?: IColor;
    isLoaded?: false;
    size?: ISize;
};
type ISkeletonTextComponentProps = {
    fadeDuration?: number;
    speed?: number;
    startColor?: IColor;
    endColor?: IColor;
    isLoaded?: false;
    size?: ISize;
    lines?: number;
    _line?: any;
    _stack?: any;
};
export declare const Skeleton: ISkeletonComponentType<React.ForwardRefExoticComponent<import("@gluestack-style/react/lib/typescript/types").StyledComponentProps<import("react-native").StyleProp<import("react-native").ViewStyle>, unknown, import("react-native").ViewProps, "SkeletonWrapper">>, React.ForwardRefExoticComponent<import("@gluestack-style/react/lib/typescript/types").StyledComponentProps<import("react-native").StyleProp<import("react-native").ViewStyle>, unknown, import("react-native").ViewProps, "SkeletonWrapper">>>;
export type ISkeletonComponentType<Skeleton, SkeletonText> = GenericComponentType<Skeleton, {}, ISkeletonComponentProps> & {
    Text: GenericComponentType<SkeletonText, {}, ISkeletonTextComponentProps>;
};
export {};
