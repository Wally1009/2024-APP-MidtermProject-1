"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Stack_1 = require("../Stack");
const defaultProps = {
    _line: {
        h: 12,
        borderRadius: '$full',
    },
    _stack: {
        space: 3,
        w: '100%',
    },
};
function createSkeletonText(Skeleton) {
    return (0, react_1.forwardRef)((_a, ref) => {
        var { children, startColor, endColor, lines, isLoaded, _line, _stack } = _a, props = __rest(_a, ["children", "startColor", "endColor", "lines", "isLoaded", "_line", "_stack"]);
        const computedChildren = [];
        //generating an array of skeleton components (same length as noOfLines)
        for (let i = 0; i < lines; i++) {
            //check for last line (to change the width of last line)
            if (i === lines - 1 && lines !== 1) {
                computedChildren.push(
                //Using Skeleton component with required props
                react_1.default.createElement(Skeleton, Object.assign({ key: i, endColor: endColor, startColor: startColor, w: "75%" }, defaultProps._line, _line, { h: 12 })));
            }
            else
                computedChildren.push(react_1.default.createElement(Skeleton, Object.assign({ key: i, endColor: endColor, startColor: startColor }, defaultProps._line, _line, { h: 12 })));
        }
        return isLoaded ? (children) : (react_1.default.createElement(Stack_1.Stack, Object.assign({}, defaultProps._stack, props, { ref: ref }, _stack), computedChildren));
    });
}
exports.default = createSkeletonText;
